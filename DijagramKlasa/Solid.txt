1. Princip pojedinacne odgovornosti je ispoštovan.
(„Klasa bi trebala imati samo jedan razlog za promjenu.“)
Klase imaju jednu ulogu i jedan razlog za promjenu time što su sadržane su od atributa koji su usko vezani za njihovo funkcionisanje. 
Posmatrajuci klasu „Gost“ možda bi se mogle odvojiti metode za ocjenjivanje usluge i prikaz broja dana do kraja rezervacije u zasebne, manje klase.

2. Otvoreno-zatvoreni princip
("Entiteti softvera (klase, moduli, funkcije) trebali bi biti otvoreni za nadogradnju, ali zatvoreni za modifikacije.")
Svaka klasa je jedinstvena, obavlja svoj dio posla. U našem projektu postoji vise generalizacija. Klasa Osoba je bazna klasa, i konkretna je klasa, te ne 
zavisi od klasa koje je nasljeðuju. Podrazumijeva da svaka od klasa u ovom sistemu zatvorena za izmjene, al otvorena za nadogradnju. Za sad modifikacije
nisu potrebne, dok ne iskljuèujemo takve dogaðaje u buduænosti.

3. Liskov princip zamjene
("Podtipovi moraju biti zamijenjeni osnovnim tipovima.")
U našem dijagramu klasa imamo apstraktnu klasu Osoba. Iz nje se nasljeðuju èetiri klase: Osoblje, Recepcioner, Šef i Gost. 
Apstraktna klasa Osoba sadrži metode koje implementiraju sve ostale klase. U sluèaju da su potrebne dodatne metode, svaka nasljeðena klasa je 
implementira za sebe. Ne postoje atributi niti metode koje neæe trebati nekoj od nasljeðenih klasa.Stoga, možemo reæi da je Liskov princip zamjene 
u ovom sluèaju ispoštovan.

4. Princip inverzije ovisnosti
Ne treba ovisiti od konkretnih klasa. Prilikom nasljeðivanja treba razmotriti sluèaj da je osnovna klasa apstraktna. 
Kada pogledamo dijagram klasa vidimo da je kada pratimo svaku strelicu, njen cilj je interfejs ili jedna apstraktna klasa, tacnije apstraktna klasa Osoba.
Buduæi da se ta klasa neæe mjenjati, smanjuje  se utjecaj koji promjena može imati na sistem. Drugih naslijeðivanja, tj. ovisnosti meðu klasama nema, 
pa je ovaj princip ispoštovan.

5. Princip izoliranja interfejsa je ispoštovan.
(„Klijenti ne treba da ovise o metodama koje nece upotrebljavati.“)
Korisniku su vidjljive samo metode koje su krucijalne. Posmatrajuæi naš dijagram klasa, svaka klasa ima manji broj metoda (pored getera i setera) koje su 
važne za korištenje naše aplikacije.
